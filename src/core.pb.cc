// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace nano {
namespace api {
class queryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query>
      _instance;
} _query_default_instance_;
class responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<response>
      _instance;
} _response_default_instance_;
class query_client_connectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_client_connect>
      _instance;
} _query_client_connect_default_instance_;
class res_client_connectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<res_client_connect>
      _instance;
} _res_client_connect_default_instance_;
class query_pingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_ping>
      _instance;
} _query_ping_default_instance_;
class res_pingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<res_ping>
      _instance;
} _res_ping_default_instance_;
class query_account_pendingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<query_account_pending>
      _instance;
} _query_account_pending_default_instance_;
class res_account_pendingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<res_account_pending>
      _instance;
} _res_account_pending_default_instance_;
class account_pendingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<account_pending>
      _instance;
} _account_pending_default_instance_;
class account_pending_block_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<account_pending_block_info>
      _instance;
} _account_pending_block_info_default_instance_;
}  // namespace api
}  // namespace nano
namespace protobuf_core_2eproto {
void InitDefaultsqueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_query_default_instance_;
    new (ptr) ::nano::api::query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::query::InitAsDefaultInstance();
}

void InitDefaultsquery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsqueryImpl);
}

void InitDefaultsresponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_response_default_instance_;
    new (ptr) ::nano::api::response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::response::InitAsDefaultInstance();
}

void InitDefaultsresponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsresponseImpl);
}

void InitDefaultsquery_client_connectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_query_client_connect_default_instance_;
    new (ptr) ::nano::api::query_client_connect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::query_client_connect::InitAsDefaultInstance();
}

void InitDefaultsquery_client_connect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsquery_client_connectImpl);
}

void InitDefaultsres_client_connectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_res_client_connect_default_instance_;
    new (ptr) ::nano::api::res_client_connect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::res_client_connect::InitAsDefaultInstance();
}

void InitDefaultsres_client_connect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsres_client_connectImpl);
}

void InitDefaultsquery_pingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_query_ping_default_instance_;
    new (ptr) ::nano::api::query_ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::query_ping::InitAsDefaultInstance();
}

void InitDefaultsquery_ping() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsquery_pingImpl);
}

void InitDefaultsres_pingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_res_ping_default_instance_;
    new (ptr) ::nano::api::res_ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::res_ping::InitAsDefaultInstance();
}

void InitDefaultsres_ping() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsres_pingImpl);
}

void InitDefaultsquery_account_pendingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsStringValue();
  {
    void* ptr = &::nano::api::_query_account_pending_default_instance_;
    new (ptr) ::nano::api::query_account_pending();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::query_account_pending::InitAsDefaultInstance();
}

void InitDefaultsquery_account_pending() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsquery_account_pendingImpl);
}

void InitDefaultsres_account_pendingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_core_2eproto::InitDefaultsaccount_pending();
  {
    void* ptr = &::nano::api::_res_account_pending_default_instance_;
    new (ptr) ::nano::api::res_account_pending();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::res_account_pending::InitAsDefaultInstance();
}

void InitDefaultsres_account_pending() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsres_account_pendingImpl);
}

void InitDefaultsaccount_pendingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_core_2eproto::InitDefaultsaccount_pending_block_info();
  {
    void* ptr = &::nano::api::_account_pending_default_instance_;
    new (ptr) ::nano::api::account_pending();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::account_pending::InitAsDefaultInstance();
}

void InitDefaultsaccount_pending() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsaccount_pendingImpl);
}

void InitDefaultsaccount_pending_block_infoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::nano::api::_account_pending_block_info_default_instance_;
    new (ptr) ::nano::api::account_pending_block_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nano::api::account_pending_block_info::InitAsDefaultInstance();
}

void InitDefaultsaccount_pending_block_info() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsaccount_pending_block_infoImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::response, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::response, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::response, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::response, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_client_connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_client_connect, api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_client_connect, api_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_client_connect, api_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_client_connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_client_connect, api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_client_connect, node_version_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_client_connect, node_version_patch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_ping, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_ping, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_account_pending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_account_pending, accounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_account_pending, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_account_pending, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::query_account_pending, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_account_pending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::res_account_pending, pending_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending, block_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending_block_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending_block_info, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending_block_info, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::nano::api::account_pending_block_info, source_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nano::api::query)},
  { 6, -1, sizeof(::nano::api::response)},
  { 15, -1, sizeof(::nano::api::query_client_connect)},
  { 23, -1, sizeof(::nano::api::res_client_connect)},
  { 31, -1, sizeof(::nano::api::query_ping)},
  { 37, -1, sizeof(::nano::api::res_ping)},
  { 43, -1, sizeof(::nano::api::query_account_pending)},
  { 52, -1, sizeof(::nano::api::res_account_pending)},
  { 58, -1, sizeof(::nano::api::account_pending)},
  { 65, -1, sizeof(::nano::api::account_pending_block_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_query_client_connect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_res_client_connect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_query_ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_res_ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_query_account_pending_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_res_account_pending_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_account_pending_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::nano::api::_account_pending_block_info_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "core.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ncore.proto\022\010nano.api\032\036google/protobuf/"
      "wrappers.proto\"*\n\005query\022!\n\004type\030\001 \001(\0162\023."
      "nano.api.QueryType\"r\n\010response\022 \n\006result"
      "\030\001 \001(\0162\020.nano.api.Result\022!\n\004type\030\002 \001(\0162\023"
      ".nano.api.QueryType\022\r\n\005error\030\003 \001(\t\022\022\n\ner"
      "ror_code\030\004 \001(\021\"S\n\024query_client_connect\022\023"
      "\n\013api_version\030\001 \001(\r\022\025\n\rapi_client_id\030\002 \001"
      "(\t\022\017\n\007api_key\030\003 \001(\t\"a\n\022res_client_connec"
      "t\022\023\n\013api_version\030\001 \001(\r\022\032\n\022node_version_m"
      "ajor\030\002 \001(\r\022\032\n\022node_version_patch\030\003 \001(\r\"\030"
      "\n\nquery_ping\022\n\n\002id\030\001 \001(\r\"\026\n\010res_ping\022\n\n\002"
      "id\030\001 \001(\r\"y\n\025query_account_pending\022\020\n\010acc"
      "ounts\030\001 \003(\t\022\r\n\005count\030\002 \001(\004\022\016\n\006source\030\003 \001"
      "(\010\022/\n\tthreshold\030\004 \001(\0132\034.google.protobuf."
      "StringValue\"A\n\023res_account_pending\022*\n\007pe"
      "nding\030\001 \003(\0132\031.nano.api.account_pending\"\\"
      "\n\017account_pending\022\017\n\007account\030\001 \001(\t\0228\n\nbl"
      "ock_info\030\002 \003(\0132$.nano.api.account_pendin"
      "g_block_info\"J\n\032account_pending_block_in"
      "fo\022\014\n\004hash\030\001 \001(\t\022\016\n\006amount\030\002 \001(\t\022\016\n\006sour"
      "ce\030\003 \001(\t*{\n\tQueryType\022\n\n\006UNKOWN\020\000\022\025\n\021REG"
      "ISTER_CALLBACK\020\001\022\010\n\004PING\020\002\022\023\n\017ACCOUNT_BA"
      "LANCE\020\003\022\027\n\023ACCOUNT_BLOCK_COUNT\020\004\022\023\n\017ACCO"
      "UNT_PENDING\020\005*D\n\006Result\022\006\n\002OK\020\000\022\021\n\rGENER"
      "IC_ERROR\020\001\022\021\n\rINVALID_INPUT\020\002\022\014\n\010IO_ERRO"
      "R\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1011);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "core.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_core_2eproto
namespace nano {
namespace api {
const ::google::protobuf::EnumDescriptor* QueryType_descriptor() {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2eproto::file_level_enum_descriptors[0];
}
bool QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_core_2eproto::file_level_enum_descriptors[1];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void query::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query::query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsquery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.query)
}
query::query(const query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:nano.api.query)
}

void query::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

query::~query() {
  // @@protoc_insertion_point(destructor:nano.api.query)
  SharedDtor();
}

void query::SharedDtor() {
}

void query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query& query::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsquery();
  return *internal_default_instance();
}

query* query::New(::google::protobuf::Arena* arena) const {
  query* n = new query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

bool query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nano.api.QueryType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::nano::api::QueryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.query)
  return false;
#undef DO_
}

void query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nano.api.QueryType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.query)
}

::google::protobuf::uint8* query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nano.api.QueryType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.query)
  return target;
}

size_t query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.query)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .nano.api.QueryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.query)
  GOOGLE_DCHECK_NE(&from, this);
  const query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.query)
    MergeFrom(*source);
  }
}

void query::MergeFrom(const query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query::CopyFrom(const query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query::IsInitialized() const {
  return true;
}

void query::Swap(query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query::InternalSwap(query* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void response::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int response::kResultFieldNumber;
const int response::kTypeFieldNumber;
const int response::kErrorFieldNumber;
const int response::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

response::response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsresponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.response)
}
response::response(const response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&result_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:nano.api.response)
}

void response::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&result_)) + sizeof(error_code_));
  _cached_size_ = 0;
}

response::~response() {
  // @@protoc_insertion_point(destructor:nano.api.response)
  SharedDtor();
}

void response::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* response::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const response& response::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsresponse();
  return *internal_default_instance();
}

response* response::New(::google::protobuf::Arena* arena) const {
  response* n = new response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void response::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&result_)) + sizeof(error_code_));
  _internal_metadata_.Clear();
}

bool response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nano.api.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::nano::api::Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nano.api.QueryType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::nano::api::QueryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.response.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 error_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.response)
  return false;
#undef DO_
}

void response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nano.api.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // .nano.api.QueryType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.response.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // sint32 error_code = 4;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.response)
}

::google::protobuf::uint8* response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nano.api.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // .nano.api.QueryType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.response.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // sint32 error_code = 4;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.response)
  return target;
}

size_t response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .nano.api.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // .nano.api.QueryType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // sint32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.response)
  GOOGLE_DCHECK_NE(&from, this);
  const response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.response)
    MergeFrom(*source);
  }
}

void response::MergeFrom(const response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void response::CopyFrom(const response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool response::IsInitialized() const {
  return true;
}

void response::Swap(response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void response::InternalSwap(response* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(result_, other->result_);
  swap(type_, other->type_);
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata response::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_client_connect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_client_connect::kApiVersionFieldNumber;
const int query_client_connect::kApiClientIdFieldNumber;
const int query_client_connect::kApiKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_client_connect::query_client_connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsquery_client_connect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.query_client_connect)
}
query_client_connect::query_client_connect(const query_client_connect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_client_id().size() > 0) {
    api_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_client_id_);
  }
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_key().size() > 0) {
    api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  api_version_ = from.api_version_;
  // @@protoc_insertion_point(copy_constructor:nano.api.query_client_connect)
}

void query_client_connect::SharedCtor() {
  api_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_version_ = 0u;
  _cached_size_ = 0;
}

query_client_connect::~query_client_connect() {
  // @@protoc_insertion_point(destructor:nano.api.query_client_connect)
  SharedDtor();
}

void query_client_connect::SharedDtor() {
  api_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void query_client_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_client_connect::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_client_connect& query_client_connect::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsquery_client_connect();
  return *internal_default_instance();
}

query_client_connect* query_client_connect::New(::google::protobuf::Arena* arena) const {
  query_client_connect* n = new query_client_connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_client_connect::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.query_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  api_version_ = 0u;
  _internal_metadata_.Clear();
}

bool query_client_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.query_client_connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &api_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_client_id().data(), static_cast<int>(this->api_client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.query_client_connect.api_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_key().data(), static_cast<int>(this->api_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.query_client_connect.api_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.query_client_connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.query_client_connect)
  return false;
#undef DO_
}

void query_client_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.query_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->api_version(), output);
  }

  // string api_client_id = 2;
  if (this->api_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_client_id().data(), static_cast<int>(this->api_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_client_connect.api_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->api_client_id(), output);
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_client_connect.api_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->api_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.query_client_connect)
}

::google::protobuf::uint8* query_client_connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.query_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->api_version(), target);
  }

  // string api_client_id = 2;
  if (this->api_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_client_id().data(), static_cast<int>(this->api_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_client_connect.api_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_client_id(), target);
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_client_connect.api_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->api_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.query_client_connect)
  return target;
}

size_t query_client_connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.query_client_connect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string api_client_id = 2;
  if (this->api_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_client_id());
  }

  // string api_key = 3;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_key());
  }

  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->api_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_client_connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.query_client_connect)
  GOOGLE_DCHECK_NE(&from, this);
  const query_client_connect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_client_connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.query_client_connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.query_client_connect)
    MergeFrom(*source);
  }
}

void query_client_connect::MergeFrom(const query_client_connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.query_client_connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.api_client_id().size() > 0) {

    api_client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_client_id_);
  }
  if (from.api_key().size() > 0) {

    api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  if (from.api_version() != 0) {
    set_api_version(from.api_version());
  }
}

void query_client_connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.query_client_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_client_connect::CopyFrom(const query_client_connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.query_client_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_client_connect::IsInitialized() const {
  return true;
}

void query_client_connect::Swap(query_client_connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_client_connect::InternalSwap(query_client_connect* other) {
  using std::swap;
  api_client_id_.Swap(&other->api_client_id_);
  api_key_.Swap(&other->api_key_);
  swap(api_version_, other->api_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_client_connect::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void res_client_connect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int res_client_connect::kApiVersionFieldNumber;
const int res_client_connect::kNodeVersionMajorFieldNumber;
const int res_client_connect::kNodeVersionPatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

res_client_connect::res_client_connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsres_client_connect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.res_client_connect)
}
res_client_connect::res_client_connect(const res_client_connect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&api_version_, &from.api_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_version_patch_) -
    reinterpret_cast<char*>(&api_version_)) + sizeof(node_version_patch_));
  // @@protoc_insertion_point(copy_constructor:nano.api.res_client_connect)
}

void res_client_connect::SharedCtor() {
  ::memset(&api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_version_patch_) -
      reinterpret_cast<char*>(&api_version_)) + sizeof(node_version_patch_));
  _cached_size_ = 0;
}

res_client_connect::~res_client_connect() {
  // @@protoc_insertion_point(destructor:nano.api.res_client_connect)
  SharedDtor();
}

void res_client_connect::SharedDtor() {
}

void res_client_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_client_connect::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const res_client_connect& res_client_connect::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsres_client_connect();
  return *internal_default_instance();
}

res_client_connect* res_client_connect::New(::google::protobuf::Arena* arena) const {
  res_client_connect* n = new res_client_connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void res_client_connect::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.res_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_version_patch_) -
      reinterpret_cast<char*>(&api_version_)) + sizeof(node_version_patch_));
  _internal_metadata_.Clear();
}

bool res_client_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.res_client_connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &api_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 node_version_major = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_version_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 node_version_patch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_version_patch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.res_client_connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.res_client_connect)
  return false;
#undef DO_
}

void res_client_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.res_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->api_version(), output);
  }

  // uint32 node_version_major = 2;
  if (this->node_version_major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_version_major(), output);
  }

  // uint32 node_version_patch = 3;
  if (this->node_version_patch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->node_version_patch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.res_client_connect)
}

::google::protobuf::uint8* res_client_connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.res_client_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->api_version(), target);
  }

  // uint32 node_version_major = 2;
  if (this->node_version_major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_version_major(), target);
  }

  // uint32 node_version_patch = 3;
  if (this->node_version_patch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->node_version_patch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.res_client_connect)
  return target;
}

size_t res_client_connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.res_client_connect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 api_version = 1;
  if (this->api_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->api_version());
  }

  // uint32 node_version_major = 2;
  if (this->node_version_major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_version_major());
  }

  // uint32 node_version_patch = 3;
  if (this->node_version_patch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_version_patch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_client_connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.res_client_connect)
  GOOGLE_DCHECK_NE(&from, this);
  const res_client_connect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const res_client_connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.res_client_connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.res_client_connect)
    MergeFrom(*source);
  }
}

void res_client_connect::MergeFrom(const res_client_connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.res_client_connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.api_version() != 0) {
    set_api_version(from.api_version());
  }
  if (from.node_version_major() != 0) {
    set_node_version_major(from.node_version_major());
  }
  if (from.node_version_patch() != 0) {
    set_node_version_patch(from.node_version_patch());
  }
}

void res_client_connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.res_client_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_client_connect::CopyFrom(const res_client_connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.res_client_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_client_connect::IsInitialized() const {
  return true;
}

void res_client_connect::Swap(res_client_connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void res_client_connect::InternalSwap(res_client_connect* other) {
  using std::swap;
  swap(api_version_, other->api_version_);
  swap(node_version_major_, other->node_version_major_);
  swap(node_version_patch_, other->node_version_patch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata res_client_connect::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_ping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_ping::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_ping::query_ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsquery_ping();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.query_ping)
}
query_ping::query_ping(const query_ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:nano.api.query_ping)
}

void query_ping::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

query_ping::~query_ping() {
  // @@protoc_insertion_point(destructor:nano.api.query_ping)
  SharedDtor();
}

void query_ping::SharedDtor() {
}

void query_ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_ping::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_ping& query_ping::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsquery_ping();
  return *internal_default_instance();
}

query_ping* query_ping::New(::google::protobuf::Arena* arena) const {
  query_ping* n = new query_ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.query_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

bool query_ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.query_ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.query_ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.query_ping)
  return false;
#undef DO_
}

void query_ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.query_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.query_ping)
}

::google::protobuf::uint8* query_ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.query_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.query_ping)
  return target;
}

size_t query_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.query_ping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.query_ping)
  GOOGLE_DCHECK_NE(&from, this);
  const query_ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.query_ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.query_ping)
    MergeFrom(*source);
  }
}

void query_ping::MergeFrom(const query_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.query_ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void query_ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.query_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_ping::CopyFrom(const query_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.query_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_ping::IsInitialized() const {
  return true;
}

void query_ping::Swap(query_ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_ping::InternalSwap(query_ping* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_ping::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void res_ping::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int res_ping::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

res_ping::res_ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsres_ping();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.res_ping)
}
res_ping::res_ping(const res_ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:nano.api.res_ping)
}

void res_ping::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

res_ping::~res_ping() {
  // @@protoc_insertion_point(destructor:nano.api.res_ping)
  SharedDtor();
}

void res_ping::SharedDtor() {
}

void res_ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_ping::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const res_ping& res_ping::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsres_ping();
  return *internal_default_instance();
}

res_ping* res_ping::New(::google::protobuf::Arena* arena) const {
  res_ping* n = new res_ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void res_ping::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.res_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

bool res_ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.res_ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.res_ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.res_ping)
  return false;
#undef DO_
}

void res_ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.res_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.res_ping)
}

::google::protobuf::uint8* res_ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.res_ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.res_ping)
  return target;
}

size_t res_ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.res_ping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.res_ping)
  GOOGLE_DCHECK_NE(&from, this);
  const res_ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const res_ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.res_ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.res_ping)
    MergeFrom(*source);
  }
}

void res_ping::MergeFrom(const res_ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.res_ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void res_ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.res_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_ping::CopyFrom(const res_ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.res_ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_ping::IsInitialized() const {
  return true;
}

void res_ping::Swap(res_ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void res_ping::InternalSwap(res_ping* other) {
  using std::swap;
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata res_ping::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void query_account_pending::InitAsDefaultInstance() {
  ::nano::api::_query_account_pending_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void query_account_pending::clear_threshold() {
  if (GetArenaNoVirtual() == NULL && threshold_ != NULL) {
    delete threshold_;
  }
  threshold_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int query_account_pending::kAccountsFieldNumber;
const int query_account_pending::kCountFieldNumber;
const int query_account_pending::kSourceFieldNumber;
const int query_account_pending::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

query_account_pending::query_account_pending()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsquery_account_pending();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.query_account_pending)
}
query_account_pending::query_account_pending(const query_account_pending& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      accounts_(from.accounts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_threshold()) {
    threshold_ = new ::google::protobuf::StringValue(*from.threshold_);
  } else {
    threshold_ = NULL;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&count_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:nano.api.query_account_pending)
}

void query_account_pending::SharedCtor() {
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(source_));
  _cached_size_ = 0;
}

query_account_pending::~query_account_pending() {
  // @@protoc_insertion_point(destructor:nano.api.query_account_pending)
  SharedDtor();
}

void query_account_pending::SharedDtor() {
  if (this != internal_default_instance()) delete threshold_;
}

void query_account_pending::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* query_account_pending::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const query_account_pending& query_account_pending::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsquery_account_pending();
  return *internal_default_instance();
}

query_account_pending* query_account_pending::New(::google::protobuf::Arena* arena) const {
  query_account_pending* n = new query_account_pending;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void query_account_pending::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.query_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  if (GetArenaNoVirtual() == NULL && threshold_ != NULL) {
    delete threshold_;
  }
  threshold_ = NULL;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&count_)) + sizeof(source_));
  _internal_metadata_.Clear();
}

bool query_account_pending::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.query_account_pending)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accounts()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accounts(this->accounts_size() - 1).data(),
            static_cast<int>(this->accounts(this->accounts_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.query_account_pending.accounts"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.query_account_pending)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.query_account_pending)
  return false;
#undef DO_
}

void query_account_pending::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.query_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1;
  for (int i = 0, n = this->accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accounts(i).data(), static_cast<int>(this->accounts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_account_pending.accounts");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accounts(i), output);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  // bool source = 3;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->source(), output);
  }

  // .google.protobuf.StringValue threshold = 4;
  if (this->has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->threshold_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.query_account_pending)
}

::google::protobuf::uint8* query_account_pending::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.query_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string accounts = 1;
  for (int i = 0, n = this->accounts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accounts(i).data(), static_cast<int>(this->accounts(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.query_account_pending.accounts");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->accounts(i), target);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  // bool source = 3;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->source(), target);
  }

  // .google.protobuf.StringValue threshold = 4;
  if (this->has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->threshold_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.query_account_pending)
  return target;
}

size_t query_account_pending::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.query_account_pending)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string accounts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accounts_size());
  for (int i = 0, n = this->accounts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accounts(i));
  }

  // .google.protobuf.StringValue threshold = 4;
  if (this->has_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->threshold_);
  }

  // uint64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  // bool source = 3;
  if (this->source() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void query_account_pending::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.query_account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  const query_account_pending* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const query_account_pending>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.query_account_pending)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.query_account_pending)
    MergeFrom(*source);
  }
}

void query_account_pending::MergeFrom(const query_account_pending& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.query_account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.has_threshold()) {
    mutable_threshold()->::google::protobuf::StringValue::MergeFrom(from.threshold());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void query_account_pending::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.query_account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void query_account_pending::CopyFrom(const query_account_pending& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.query_account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool query_account_pending::IsInitialized() const {
  return true;
}

void query_account_pending::Swap(query_account_pending* other) {
  if (other == this) return;
  InternalSwap(other);
}
void query_account_pending::InternalSwap(query_account_pending* other) {
  using std::swap;
  accounts_.InternalSwap(&other->accounts_);
  swap(threshold_, other->threshold_);
  swap(count_, other->count_);
  swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata query_account_pending::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void res_account_pending::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int res_account_pending::kPendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

res_account_pending::res_account_pending()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsres_account_pending();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.res_account_pending)
}
res_account_pending::res_account_pending(const res_account_pending& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pending_(from.pending_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nano.api.res_account_pending)
}

void res_account_pending::SharedCtor() {
  _cached_size_ = 0;
}

res_account_pending::~res_account_pending() {
  // @@protoc_insertion_point(destructor:nano.api.res_account_pending)
  SharedDtor();
}

void res_account_pending::SharedDtor() {
}

void res_account_pending::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* res_account_pending::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const res_account_pending& res_account_pending::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsres_account_pending();
  return *internal_default_instance();
}

res_account_pending* res_account_pending::New(::google::protobuf::Arena* arena) const {
  res_account_pending* n = new res_account_pending;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void res_account_pending::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.res_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_.Clear();
  _internal_metadata_.Clear();
}

bool res_account_pending::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.res_account_pending)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nano.api.account_pending pending = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pending()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.res_account_pending)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.res_account_pending)
  return false;
#undef DO_
}

void res_account_pending::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.res_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nano.api.account_pending pending = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pending(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.res_account_pending)
}

::google::protobuf::uint8* res_account_pending::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.res_account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nano.api.account_pending pending = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pending(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.res_account_pending)
  return target;
}

size_t res_account_pending::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.res_account_pending)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nano.api.account_pending pending = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pending(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void res_account_pending::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.res_account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  const res_account_pending* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const res_account_pending>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.res_account_pending)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.res_account_pending)
    MergeFrom(*source);
  }
}

void res_account_pending::MergeFrom(const res_account_pending& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.res_account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_.MergeFrom(from.pending_);
}

void res_account_pending::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.res_account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void res_account_pending::CopyFrom(const res_account_pending& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.res_account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool res_account_pending::IsInitialized() const {
  return true;
}

void res_account_pending::Swap(res_account_pending* other) {
  if (other == this) return;
  InternalSwap(other);
}
void res_account_pending::InternalSwap(res_account_pending* other) {
  using std::swap;
  pending_.InternalSwap(&other->pending_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata res_account_pending::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void account_pending::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int account_pending::kAccountFieldNumber;
const int account_pending::kBlockInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

account_pending::account_pending()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsaccount_pending();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.account_pending)
}
account_pending::account_pending(const account_pending& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      block_info_(from.block_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:nano.api.account_pending)
}

void account_pending::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

account_pending::~account_pending() {
  // @@protoc_insertion_point(destructor:nano.api.account_pending)
  SharedDtor();
}

void account_pending::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void account_pending::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_pending::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const account_pending& account_pending::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsaccount_pending();
  return *internal_default_instance();
}

account_pending* account_pending::New(::google::protobuf::Arena* arena) const {
  account_pending* n = new account_pending;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void account_pending::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_info_.Clear();
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool account_pending::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.account_pending)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.account_pending.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nano.api.account_pending_block_info block_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_block_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.account_pending)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.account_pending)
  return false;
#undef DO_
}

void account_pending::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // repeated .nano.api.account_pending_block_info block_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_info(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.account_pending)
}

::google::protobuf::uint8* account_pending::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.account_pending)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // repeated .nano.api.account_pending_block_info block_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->block_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.account_pending)
  return target;
}

size_t account_pending::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.account_pending)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .nano.api.account_pending_block_info block_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->block_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->block_info(static_cast<int>(i)));
    }
  }

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_pending::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  const account_pending* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const account_pending>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.account_pending)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.account_pending)
    MergeFrom(*source);
  }
}

void account_pending::MergeFrom(const account_pending& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.account_pending)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_info_.MergeFrom(from.block_info_);
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void account_pending::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_pending::CopyFrom(const account_pending& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.account_pending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_pending::IsInitialized() const {
  return true;
}

void account_pending::Swap(account_pending* other) {
  if (other == this) return;
  InternalSwap(other);
}
void account_pending::InternalSwap(account_pending* other) {
  using std::swap;
  block_info_.InternalSwap(&other->block_info_);
  account_.Swap(&other->account_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata account_pending::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void account_pending_block_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int account_pending_block_info::kHashFieldNumber;
const int account_pending_block_info::kAmountFieldNumber;
const int account_pending_block_info::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

account_pending_block_info::account_pending_block_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_core_2eproto::InitDefaultsaccount_pending_block_info();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:nano.api.account_pending_block_info)
}
account_pending_block_info::account_pending_block_info(const account_pending_block_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.amount().size() > 0) {
    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source().size() > 0) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  // @@protoc_insertion_point(copy_constructor:nano.api.account_pending_block_info)
}

void account_pending_block_info::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

account_pending_block_info::~account_pending_block_info() {
  // @@protoc_insertion_point(destructor:nano.api.account_pending_block_info)
  SharedDtor();
}

void account_pending_block_info::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void account_pending_block_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_pending_block_info::descriptor() {
  ::protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const account_pending_block_info& account_pending_block_info::default_instance() {
  ::protobuf_core_2eproto::InitDefaultsaccount_pending_block_info();
  return *internal_default_instance();
}

account_pending_block_info* account_pending_block_info::New(::google::protobuf::Arena* arena) const {
  account_pending_block_info* n = new account_pending_block_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void account_pending_block_info::Clear() {
// @@protoc_insertion_point(message_clear_start:nano.api.account_pending_block_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool account_pending_block_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nano.api.account_pending_block_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.account_pending_block_info.hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), static_cast<int>(this->amount().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.account_pending_block_info.amount"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nano.api.account_pending_block_info.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nano.api.account_pending_block_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nano.api.account_pending_block_info)
  return false;
#undef DO_
}

void account_pending_block_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nano.api.account_pending_block_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->amount(), output);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:nano.api.account_pending_block_info)
}

::google::protobuf::uint8* account_pending_block_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:nano.api.account_pending_block_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), static_cast<int>(this->amount().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->amount(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nano.api.account_pending_block_info.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nano.api.account_pending_block_info)
  return target;
}

size_t account_pending_block_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nano.api.account_pending_block_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // string amount = 2;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_pending_block_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nano.api.account_pending_block_info)
  GOOGLE_DCHECK_NE(&from, this);
  const account_pending_block_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const account_pending_block_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nano.api.account_pending_block_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nano.api.account_pending_block_info)
    MergeFrom(*source);
  }
}

void account_pending_block_info::MergeFrom(const account_pending_block_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nano.api.account_pending_block_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
}

void account_pending_block_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nano.api.account_pending_block_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_pending_block_info::CopyFrom(const account_pending_block_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nano.api.account_pending_block_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_pending_block_info::IsInitialized() const {
  return true;
}

void account_pending_block_info::Swap(account_pending_block_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void account_pending_block_info::InternalSwap(account_pending_block_info* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  amount_.Swap(&other->amount_);
  source_.Swap(&other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata account_pending_block_info::GetMetadata() const {
  protobuf_core_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_core_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace nano

// @@protoc_insertion_point(global_scope)
