/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: core.proto */

#ifndef PROTOBUF_C_core_2eproto__INCLUDED
#define PROTOBUF_C_core_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/wrappers.pb-c.h"

typedef struct _Request Request;
typedef struct _Response Response;
typedef struct _ReqPing ReqPing;
typedef struct _ResPing ResPing;
typedef struct _ReqAccountPending ReqAccountPending;
typedef struct _ResAccountPending ResAccountPending;
typedef struct _AccountPending AccountPending;
typedef struct _AccountPendingBlockInfo AccountPendingBlockInfo;


/* --- enums --- */

/*
 **
 * The request type enum values must NOT change. The name of the enum must match
 * the request message name, uppercased, and without the req_ prefix. This naming
 * standard facilitates dynamic lookup and generic frameworks.
 */
typedef enum _RequestType {
  REQUEST_TYPE__INVALID = 0,
  REQUEST_TYPE__REGISTER_CALLBACK = 1,
  REQUEST_TYPE__PING = 2,
  REQUEST_TYPE__ACCOUNT_BALANCE = 3,
  REQUEST_TYPE__ACCOUNT_BLOCK_COUNT = 4,
  REQUEST_TYPE__ACCOUNT_PENDING = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQUEST_TYPE)
} RequestType;

/* --- messages --- */

/*
 ** 
 * Request header.
 * This is serialized before the actual request to tell the node what message to expect next.
 * Other request meta data may be added in the future.
 */
struct  _Request
{
  ProtobufCMessage base;
  /*
   ** Request type 
   */
  RequestType type;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , REQUEST_TYPE__INVALID }


/*
 **
 * Response header.
 * This is serialized before the actual response.
 */
struct  _Response
{
  ProtobufCMessage base;
  /*
   ** 
   * For which request type is this a response? This flag allows future support for clients 
   * issuing multiple concurrent requests, as well as callback messages.
   * This may not be set if error_code is non-zero.
   */
  RequestType type;
  /*
   **
   * Context dependent error code. For instance, if IO_ERROR occurs, the error_code
   * may contain a more specific, system depended error code.
   */
  int32_t error_code;
  /*
   ** Error message. Only set if error_code is non-zero. 
   */
  char *error_message;
  /*
   ** Error category name. Only set if error_code is non-zero. 
   */
  char *error_category;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , REQUEST_TYPE__INVALID, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 ** Send ping to the node 
 */
struct  _ReqPing
{
  ProtobufCMessage base;
  /*
   ** Ping ID. The node will respond with the same ID. 
   */
  uint32_t id;
};
#define REQ_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_ping__descriptor) \
    , 0 }


/*
 ** Ping response 
 */
struct  _ResPing
{
  ProtobufCMessage base;
  /*
   ** The same ID as sent in the ping reqyest 
   */
  uint32_t id;
};
#define RES_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_ping__descriptor) \
    , 0 }


/*
 ** Returns a list of block hashes which have not yet been received by these accounts 
 */
struct  _ReqAccountPending
{
  ProtobufCMessage base;
  /*
   ** List of accounts to query 
   */
  size_t n_accounts;
  char **accounts;
  /*
   ** Maximum number of blocks to return 
   */
  uint64_t count;
  /*
   ** If true, include source account 
   */
  protobuf_c_boolean source;
  /*
   ** Optional threshold. Returns a list of pending block hashes with amount more or equal to the threshold. 
   */
  Google__Protobuf__StringValue *threshold;
};
#define REQ_ACCOUNT_PENDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_account_pending__descriptor) \
    , 0,NULL, 0, 0, NULL }


/*
 ** account_pending result 
 */
struct  _ResAccountPending
{
  ProtobufCMessage base;
  /*
   ** List of accounts, each with a list of pending blocks 
   */
  size_t n_pending;
  AccountPending **pending;
};
#define RES_ACCOUNT_PENDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_account_pending__descriptor) \
    , 0,NULL }


/*
 ** Blocks per account 
 */
struct  _AccountPending
{
  ProtobufCMessage base;
  /*
   ** The account 
   */
  char *account;
  /*
   ** List of blocks with details 
   */
  size_t n_block_info;
  AccountPendingBlockInfo **block_info;
};
#define ACCOUNT_PENDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&account_pending__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


/*
 ** Information supplied for each account in req_account_pending 
 */
struct  _AccountPendingBlockInfo
{
  ProtobufCMessage base;
  char *hash;
  char *amount;
  char *source;
};
#define ACCOUNT_PENDING_BLOCK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&account_pending_block_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* ReqPing methods */
void   req_ping__init
                     (ReqPing         *message);
size_t req_ping__get_packed_size
                     (const ReqPing   *message);
size_t req_ping__pack
                     (const ReqPing   *message,
                      uint8_t             *out);
size_t req_ping__pack_to_buffer
                     (const ReqPing   *message,
                      ProtobufCBuffer     *buffer);
ReqPing *
       req_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_ping__free_unpacked
                     (ReqPing *message,
                      ProtobufCAllocator *allocator);
/* ResPing methods */
void   res_ping__init
                     (ResPing         *message);
size_t res_ping__get_packed_size
                     (const ResPing   *message);
size_t res_ping__pack
                     (const ResPing   *message,
                      uint8_t             *out);
size_t res_ping__pack_to_buffer
                     (const ResPing   *message,
                      ProtobufCBuffer     *buffer);
ResPing *
       res_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_ping__free_unpacked
                     (ResPing *message,
                      ProtobufCAllocator *allocator);
/* ReqAccountPending methods */
void   req_account_pending__init
                     (ReqAccountPending         *message);
size_t req_account_pending__get_packed_size
                     (const ReqAccountPending   *message);
size_t req_account_pending__pack
                     (const ReqAccountPending   *message,
                      uint8_t             *out);
size_t req_account_pending__pack_to_buffer
                     (const ReqAccountPending   *message,
                      ProtobufCBuffer     *buffer);
ReqAccountPending *
       req_account_pending__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_account_pending__free_unpacked
                     (ReqAccountPending *message,
                      ProtobufCAllocator *allocator);
/* ResAccountPending methods */
void   res_account_pending__init
                     (ResAccountPending         *message);
size_t res_account_pending__get_packed_size
                     (const ResAccountPending   *message);
size_t res_account_pending__pack
                     (const ResAccountPending   *message,
                      uint8_t             *out);
size_t res_account_pending__pack_to_buffer
                     (const ResAccountPending   *message,
                      ProtobufCBuffer     *buffer);
ResAccountPending *
       res_account_pending__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_account_pending__free_unpacked
                     (ResAccountPending *message,
                      ProtobufCAllocator *allocator);
/* AccountPending methods */
void   account_pending__init
                     (AccountPending         *message);
size_t account_pending__get_packed_size
                     (const AccountPending   *message);
size_t account_pending__pack
                     (const AccountPending   *message,
                      uint8_t             *out);
size_t account_pending__pack_to_buffer
                     (const AccountPending   *message,
                      ProtobufCBuffer     *buffer);
AccountPending *
       account_pending__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   account_pending__free_unpacked
                     (AccountPending *message,
                      ProtobufCAllocator *allocator);
/* AccountPendingBlockInfo methods */
void   account_pending_block_info__init
                     (AccountPendingBlockInfo         *message);
size_t account_pending_block_info__get_packed_size
                     (const AccountPendingBlockInfo   *message);
size_t account_pending_block_info__pack
                     (const AccountPendingBlockInfo   *message,
                      uint8_t             *out);
size_t account_pending_block_info__pack_to_buffer
                     (const AccountPendingBlockInfo   *message,
                      ProtobufCBuffer     *buffer);
AccountPendingBlockInfo *
       account_pending_block_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   account_pending_block_info__free_unpacked
                     (AccountPendingBlockInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*ReqPing_Closure)
                 (const ReqPing *message,
                  void *closure_data);
typedef void (*ResPing_Closure)
                 (const ResPing *message,
                  void *closure_data);
typedef void (*ReqAccountPending_Closure)
                 (const ReqAccountPending *message,
                  void *closure_data);
typedef void (*ResAccountPending_Closure)
                 (const ResAccountPending *message,
                  void *closure_data);
typedef void (*AccountPending_Closure)
                 (const AccountPending *message,
                  void *closure_data);
typedef void (*AccountPendingBlockInfo_Closure)
                 (const AccountPendingBlockInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    request_type__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor req_ping__descriptor;
extern const ProtobufCMessageDescriptor res_ping__descriptor;
extern const ProtobufCMessageDescriptor req_account_pending__descriptor;
extern const ProtobufCMessageDescriptor res_account_pending__descriptor;
extern const ProtobufCMessageDescriptor account_pending__descriptor;
extern const ProtobufCMessageDescriptor account_pending_block_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_core_2eproto__INCLUDED */
