/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: core.proto */

#ifndef PROTOBUF_C_core_2eproto__INCLUDED
#define PROTOBUF_C_core_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/wrappers.pb-c.h"

typedef struct _Request Request;
typedef struct _Response Response;
typedef struct _ReqPing ReqPing;
typedef struct _ResPing ResPing;


/* --- enums --- */

/*
 **
 * API version numbers. As proto3 doesn't have constants, so we use an enum
 * which allows aliases. VERSION_INVALID is a 0-value placeholder, which
 * protobuf requires.
 */
typedef enum _APIVersion {
  APIVERSION__VERSION_INVALID = 0,
  APIVERSION__VERSION_MAJOR = 1,
  APIVERSION__VERSION_MINOR = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APIVERSION)
} APIVersion;
/*
 **
 * The enum values must NOT change. The name of the enum must match the
 * request message name, uppercased, and without the req_ prefix. This naming
 * standard facilitates dynamic lookup and generic frameworks.
 */
typedef enum _RequestType {
  REQUEST_TYPE__INVALID = 0,
  REQUEST_TYPE__REGISTER_CALLBACK = 1,
  /*
   * core.proto message types
   */
  REQUEST_TYPE__PING = 2,
  /*
   * accounts.proto message types
   */
  REQUEST_TYPE__ACCOUNT_PENDING = 100,
  /*
   * util.proto message types
   */
  REQUEST_TYPE__ADDRESS_VALID = 1000
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REQUEST_TYPE)
} RequestType;

/* --- messages --- */

/*
 **
 * Request header.
 * This is serialized before the actual request to tell the node what message to expect next.
 * Other request meta data may be added in the future.
 */
struct  _Request
{
  ProtobufCMessage base;
  /*
   ** Request type 
   */
  RequestType type;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , REQUEST_TYPE__INVALID }


/*
 **
 * Response header.
 * This is serialized before the actual response.
 */
struct  _Response
{
  ProtobufCMessage base;
  /*
   **
   * For which request type is this a response? This flag allows future support for clients
   * issuing multiple concurrent requests, as well as callback messages.
   * This may not be set if error_code is non-zero.
   */
  RequestType type;
  /*
   **
   * If non-zero, an error has occurred.
   */
  int32_t error_code;
  /*
   ** Error message. Only set if error_code is non-zero. 
   */
  char *error_message;
  /*
   ** Error category name. Only set if error_code is non-zero. 
   */
  char *error_category;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , REQUEST_TYPE__INVALID, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 ** Send ping to the node 
 */
struct  _ReqPing
{
  ProtobufCMessage base;
  /*
   ** Ping ID. The node will respond with the same ID. 
   */
  uint32_t id;
};
#define REQ_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_ping__descriptor) \
    , 0 }


/*
 ** Ping response 
 */
struct  _ResPing
{
  ProtobufCMessage base;
  /*
   ** The same ID as sent in the ping request 
   */
  uint32_t id;
};
#define RES_PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_ping__descriptor) \
    , 0 }


/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* ReqPing methods */
void   req_ping__init
                     (ReqPing         *message);
size_t req_ping__get_packed_size
                     (const ReqPing   *message);
size_t req_ping__pack
                     (const ReqPing   *message,
                      uint8_t             *out);
size_t req_ping__pack_to_buffer
                     (const ReqPing   *message,
                      ProtobufCBuffer     *buffer);
ReqPing *
       req_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_ping__free_unpacked
                     (ReqPing *message,
                      ProtobufCAllocator *allocator);
/* ResPing methods */
void   res_ping__init
                     (ResPing         *message);
size_t res_ping__get_packed_size
                     (const ResPing   *message);
size_t res_ping__pack
                     (const ResPing   *message,
                      uint8_t             *out);
size_t res_ping__pack_to_buffer
                     (const ResPing   *message,
                      ProtobufCBuffer     *buffer);
ResPing *
       res_ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_ping__free_unpacked
                     (ResPing *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*ReqPing_Closure)
                 (const ReqPing *message,
                  void *closure_data);
typedef void (*ResPing_Closure)
                 (const ResPing *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    apiversion__descriptor;
extern const ProtobufCEnumDescriptor    request_type__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor req_ping__descriptor;
extern const ProtobufCMessageDescriptor res_ping__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_core_2eproto__INCLUDED */
