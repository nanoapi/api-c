// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accounts.proto

#ifndef PROTOBUF_accounts_2eproto__INCLUDED
#define PROTOBUF_accounts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_accounts_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsreq_account_pendingImpl();
void InitDefaultsreq_account_pending();
void InitDefaultsres_account_pendingImpl();
void InitDefaultsres_account_pending();
void InitDefaultsaccount_pendingImpl();
void InitDefaultsaccount_pending();
void InitDefaultsaccount_pending_block_infoImpl();
void InitDefaultsaccount_pending_block_info();
inline void InitDefaults() {
  InitDefaultsreq_account_pending();
  InitDefaultsres_account_pending();
  InitDefaultsaccount_pending();
  InitDefaultsaccount_pending_block_info();
}
}  // namespace protobuf_accounts_2eproto
namespace nano {
namespace api {
class account_pending;
class account_pendingDefaultTypeInternal;
extern account_pendingDefaultTypeInternal _account_pending_default_instance_;
class account_pending_block_info;
class account_pending_block_infoDefaultTypeInternal;
extern account_pending_block_infoDefaultTypeInternal _account_pending_block_info_default_instance_;
class req_account_pending;
class req_account_pendingDefaultTypeInternal;
extern req_account_pendingDefaultTypeInternal _req_account_pending_default_instance_;
class res_account_pending;
class res_account_pendingDefaultTypeInternal;
extern res_account_pendingDefaultTypeInternal _res_account_pending_default_instance_;
}  // namespace api
}  // namespace nano
namespace nano {
namespace api {

// ===================================================================

class req_account_pending : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nano.api.req_account_pending) */ {
 public:
  req_account_pending();
  virtual ~req_account_pending();

  req_account_pending(const req_account_pending& from);

  inline req_account_pending& operator=(const req_account_pending& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req_account_pending(req_account_pending&& from) noexcept
    : req_account_pending() {
    *this = ::std::move(from);
  }

  inline req_account_pending& operator=(req_account_pending&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const req_account_pending& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req_account_pending* internal_default_instance() {
    return reinterpret_cast<const req_account_pending*>(
               &_req_account_pending_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(req_account_pending* other);
  friend void swap(req_account_pending& a, req_account_pending& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req_account_pending* New() const PROTOBUF_FINAL { return New(NULL); }

  req_account_pending* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const req_account_pending& from);
  void MergeFrom(const req_account_pending& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(req_account_pending* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  const ::std::string& accounts(int index) const;
  ::std::string* mutable_accounts(int index);
  void set_accounts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_accounts(int index, ::std::string&& value);
  #endif
  void set_accounts(int index, const char* value);
  void set_accounts(int index, const char* value, size_t size);
  ::std::string* add_accounts();
  void add_accounts(const ::std::string& value);
  #if LANG_CXX11
  void add_accounts(::std::string&& value);
  #endif
  void add_accounts(const char* value);
  void add_accounts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& accounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accounts();

  // .google.protobuf.StringValue threshold = 4;
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  const ::google::protobuf::StringValue& threshold() const;
  ::google::protobuf::StringValue* release_threshold();
  ::google::protobuf::StringValue* mutable_threshold();
  void set_allocated_threshold(::google::protobuf::StringValue* threshold);

  // uint64 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // bool source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  bool source() const;
  void set_source(bool value);

  // @@protoc_insertion_point(class_scope:nano.api.req_account_pending)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accounts_;
  ::google::protobuf::StringValue* threshold_;
  ::google::protobuf::uint64 count_;
  bool source_;
  mutable int _cached_size_;
  friend struct ::protobuf_accounts_2eproto::TableStruct;
  friend void ::protobuf_accounts_2eproto::InitDefaultsreq_account_pendingImpl();
};
// -------------------------------------------------------------------

class res_account_pending : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nano.api.res_account_pending) */ {
 public:
  res_account_pending();
  virtual ~res_account_pending();

  res_account_pending(const res_account_pending& from);

  inline res_account_pending& operator=(const res_account_pending& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  res_account_pending(res_account_pending&& from) noexcept
    : res_account_pending() {
    *this = ::std::move(from);
  }

  inline res_account_pending& operator=(res_account_pending&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const res_account_pending& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const res_account_pending* internal_default_instance() {
    return reinterpret_cast<const res_account_pending*>(
               &_res_account_pending_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(res_account_pending* other);
  friend void swap(res_account_pending& a, res_account_pending& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline res_account_pending* New() const PROTOBUF_FINAL { return New(NULL); }

  res_account_pending* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const res_account_pending& from);
  void MergeFrom(const res_account_pending& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(res_account_pending* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nano.api.account_pending pending = 1;
  int pending_size() const;
  void clear_pending();
  static const int kPendingFieldNumber = 1;
  const ::nano::api::account_pending& pending(int index) const;
  ::nano::api::account_pending* mutable_pending(int index);
  ::nano::api::account_pending* add_pending();
  ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending >*
      mutable_pending();
  const ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending >&
      pending() const;

  // @@protoc_insertion_point(class_scope:nano.api.res_account_pending)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending > pending_;
  mutable int _cached_size_;
  friend struct ::protobuf_accounts_2eproto::TableStruct;
  friend void ::protobuf_accounts_2eproto::InitDefaultsres_account_pendingImpl();
};
// -------------------------------------------------------------------

class account_pending : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nano.api.account_pending) */ {
 public:
  account_pending();
  virtual ~account_pending();

  account_pending(const account_pending& from);

  inline account_pending& operator=(const account_pending& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account_pending(account_pending&& from) noexcept
    : account_pending() {
    *this = ::std::move(from);
  }

  inline account_pending& operator=(account_pending&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const account_pending& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_pending* internal_default_instance() {
    return reinterpret_cast<const account_pending*>(
               &_account_pending_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(account_pending* other);
  friend void swap(account_pending& a, account_pending& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account_pending* New() const PROTOBUF_FINAL { return New(NULL); }

  account_pending* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const account_pending& from);
  void MergeFrom(const account_pending& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(account_pending* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .nano.api.account_pending_block_info block_info = 2;
  int block_info_size() const;
  void clear_block_info();
  static const int kBlockInfoFieldNumber = 2;
  const ::nano::api::account_pending_block_info& block_info(int index) const;
  ::nano::api::account_pending_block_info* mutable_block_info(int index);
  ::nano::api::account_pending_block_info* add_block_info();
  ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending_block_info >*
      mutable_block_info();
  const ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending_block_info >&
      block_info() const;

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:nano.api.account_pending)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending_block_info > block_info_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  mutable int _cached_size_;
  friend struct ::protobuf_accounts_2eproto::TableStruct;
  friend void ::protobuf_accounts_2eproto::InitDefaultsaccount_pendingImpl();
};
// -------------------------------------------------------------------

class account_pending_block_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nano.api.account_pending_block_info) */ {
 public:
  account_pending_block_info();
  virtual ~account_pending_block_info();

  account_pending_block_info(const account_pending_block_info& from);

  inline account_pending_block_info& operator=(const account_pending_block_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  account_pending_block_info(account_pending_block_info&& from) noexcept
    : account_pending_block_info() {
    *this = ::std::move(from);
  }

  inline account_pending_block_info& operator=(account_pending_block_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const account_pending_block_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const account_pending_block_info* internal_default_instance() {
    return reinterpret_cast<const account_pending_block_info*>(
               &_account_pending_block_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(account_pending_block_info* other);
  friend void swap(account_pending_block_info& a, account_pending_block_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline account_pending_block_info* New() const PROTOBUF_FINAL { return New(NULL); }

  account_pending_block_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const account_pending_block_info& from);
  void MergeFrom(const account_pending_block_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(account_pending_block_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // string amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // string source = 3;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:nano.api.account_pending_block_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  mutable int _cached_size_;
  friend struct ::protobuf_accounts_2eproto::TableStruct;
  friend void ::protobuf_accounts_2eproto::InitDefaultsaccount_pending_block_infoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// req_account_pending

// repeated string accounts = 1;
inline int req_account_pending::accounts_size() const {
  return accounts_.size();
}
inline void req_account_pending::clear_accounts() {
  accounts_.Clear();
}
inline const ::std::string& req_account_pending::accounts(int index) const {
  // @@protoc_insertion_point(field_get:nano.api.req_account_pending.accounts)
  return accounts_.Get(index);
}
inline ::std::string* req_account_pending::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:nano.api.req_account_pending.accounts)
  return accounts_.Mutable(index);
}
inline void req_account_pending::set_accounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nano.api.req_account_pending.accounts)
  accounts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void req_account_pending::set_accounts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:nano.api.req_account_pending.accounts)
  accounts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void req_account_pending::set_accounts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nano.api.req_account_pending.accounts)
}
inline void req_account_pending::set_accounts(int index, const char* value, size_t size) {
  accounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nano.api.req_account_pending.accounts)
}
inline ::std::string* req_account_pending::add_accounts() {
  // @@protoc_insertion_point(field_add_mutable:nano.api.req_account_pending.accounts)
  return accounts_.Add();
}
inline void req_account_pending::add_accounts(const ::std::string& value) {
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nano.api.req_account_pending.accounts)
}
#if LANG_CXX11
inline void req_account_pending::add_accounts(::std::string&& value) {
  accounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nano.api.req_account_pending.accounts)
}
#endif
inline void req_account_pending::add_accounts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  accounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nano.api.req_account_pending.accounts)
}
inline void req_account_pending::add_accounts(const char* value, size_t size) {
  accounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nano.api.req_account_pending.accounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
req_account_pending::accounts() const {
  // @@protoc_insertion_point(field_list:nano.api.req_account_pending.accounts)
  return accounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
req_account_pending::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:nano.api.req_account_pending.accounts)
  return &accounts_;
}

// uint64 count = 2;
inline void req_account_pending::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 req_account_pending::count() const {
  // @@protoc_insertion_point(field_get:nano.api.req_account_pending.count)
  return count_;
}
inline void req_account_pending::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:nano.api.req_account_pending.count)
}

// bool source = 3;
inline void req_account_pending::clear_source() {
  source_ = false;
}
inline bool req_account_pending::source() const {
  // @@protoc_insertion_point(field_get:nano.api.req_account_pending.source)
  return source_;
}
inline void req_account_pending::set_source(bool value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:nano.api.req_account_pending.source)
}

// .google.protobuf.StringValue threshold = 4;
inline bool req_account_pending::has_threshold() const {
  return this != internal_default_instance() && threshold_ != NULL;
}
inline const ::google::protobuf::StringValue& req_account_pending::threshold() const {
  const ::google::protobuf::StringValue* p = threshold_;
  // @@protoc_insertion_point(field_get:nano.api.req_account_pending.threshold)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* req_account_pending::release_threshold() {
  // @@protoc_insertion_point(field_release:nano.api.req_account_pending.threshold)
  
  ::google::protobuf::StringValue* temp = threshold_;
  threshold_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* req_account_pending::mutable_threshold() {
  
  if (threshold_ == NULL) {
    threshold_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:nano.api.req_account_pending.threshold)
  return threshold_;
}
inline void req_account_pending::set_allocated_threshold(::google::protobuf::StringValue* threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(threshold_);
  }
  if (threshold) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(threshold)->GetArena();
    if (message_arena != submessage_arena) {
      threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    
  } else {
    
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:nano.api.req_account_pending.threshold)
}

// -------------------------------------------------------------------

// res_account_pending

// repeated .nano.api.account_pending pending = 1;
inline int res_account_pending::pending_size() const {
  return pending_.size();
}
inline void res_account_pending::clear_pending() {
  pending_.Clear();
}
inline const ::nano::api::account_pending& res_account_pending::pending(int index) const {
  // @@protoc_insertion_point(field_get:nano.api.res_account_pending.pending)
  return pending_.Get(index);
}
inline ::nano::api::account_pending* res_account_pending::mutable_pending(int index) {
  // @@protoc_insertion_point(field_mutable:nano.api.res_account_pending.pending)
  return pending_.Mutable(index);
}
inline ::nano::api::account_pending* res_account_pending::add_pending() {
  // @@protoc_insertion_point(field_add:nano.api.res_account_pending.pending)
  return pending_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending >*
res_account_pending::mutable_pending() {
  // @@protoc_insertion_point(field_mutable_list:nano.api.res_account_pending.pending)
  return &pending_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending >&
res_account_pending::pending() const {
  // @@protoc_insertion_point(field_list:nano.api.res_account_pending.pending)
  return pending_;
}

// -------------------------------------------------------------------

// account_pending

// string account = 1;
inline void account_pending::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_pending::account() const {
  // @@protoc_insertion_point(field_get:nano.api.account_pending.account)
  return account_.GetNoArena();
}
inline void account_pending::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nano.api.account_pending.account)
}
#if LANG_CXX11
inline void account_pending::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nano.api.account_pending.account)
}
#endif
inline void account_pending::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nano.api.account_pending.account)
}
inline void account_pending::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nano.api.account_pending.account)
}
inline ::std::string* account_pending::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:nano.api.account_pending.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_pending::release_account() {
  // @@protoc_insertion_point(field_release:nano.api.account_pending.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_pending::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:nano.api.account_pending.account)
}

// repeated .nano.api.account_pending_block_info block_info = 2;
inline int account_pending::block_info_size() const {
  return block_info_.size();
}
inline void account_pending::clear_block_info() {
  block_info_.Clear();
}
inline const ::nano::api::account_pending_block_info& account_pending::block_info(int index) const {
  // @@protoc_insertion_point(field_get:nano.api.account_pending.block_info)
  return block_info_.Get(index);
}
inline ::nano::api::account_pending_block_info* account_pending::mutable_block_info(int index) {
  // @@protoc_insertion_point(field_mutable:nano.api.account_pending.block_info)
  return block_info_.Mutable(index);
}
inline ::nano::api::account_pending_block_info* account_pending::add_block_info() {
  // @@protoc_insertion_point(field_add:nano.api.account_pending.block_info)
  return block_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending_block_info >*
account_pending::mutable_block_info() {
  // @@protoc_insertion_point(field_mutable_list:nano.api.account_pending.block_info)
  return &block_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nano::api::account_pending_block_info >&
account_pending::block_info() const {
  // @@protoc_insertion_point(field_list:nano.api.account_pending.block_info)
  return block_info_;
}

// -------------------------------------------------------------------

// account_pending_block_info

// string hash = 1;
inline void account_pending_block_info::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_pending_block_info::hash() const {
  // @@protoc_insertion_point(field_get:nano.api.account_pending_block_info.hash)
  return hash_.GetNoArena();
}
inline void account_pending_block_info::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nano.api.account_pending_block_info.hash)
}
#if LANG_CXX11
inline void account_pending_block_info::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nano.api.account_pending_block_info.hash)
}
#endif
inline void account_pending_block_info::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nano.api.account_pending_block_info.hash)
}
inline void account_pending_block_info::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nano.api.account_pending_block_info.hash)
}
inline ::std::string* account_pending_block_info::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:nano.api.account_pending_block_info.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_pending_block_info::release_hash() {
  // @@protoc_insertion_point(field_release:nano.api.account_pending_block_info.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_pending_block_info::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:nano.api.account_pending_block_info.hash)
}

// string amount = 2;
inline void account_pending_block_info::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_pending_block_info::amount() const {
  // @@protoc_insertion_point(field_get:nano.api.account_pending_block_info.amount)
  return amount_.GetNoArena();
}
inline void account_pending_block_info::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nano.api.account_pending_block_info.amount)
}
#if LANG_CXX11
inline void account_pending_block_info::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nano.api.account_pending_block_info.amount)
}
#endif
inline void account_pending_block_info::set_amount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nano.api.account_pending_block_info.amount)
}
inline void account_pending_block_info::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nano.api.account_pending_block_info.amount)
}
inline ::std::string* account_pending_block_info::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:nano.api.account_pending_block_info.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_pending_block_info::release_amount() {
  // @@protoc_insertion_point(field_release:nano.api.account_pending_block_info.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_pending_block_info::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:nano.api.account_pending_block_info.amount)
}

// string source = 3;
inline void account_pending_block_info::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& account_pending_block_info::source() const {
  // @@protoc_insertion_point(field_get:nano.api.account_pending_block_info.source)
  return source_.GetNoArena();
}
inline void account_pending_block_info::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nano.api.account_pending_block_info.source)
}
#if LANG_CXX11
inline void account_pending_block_info::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nano.api.account_pending_block_info.source)
}
#endif
inline void account_pending_block_info::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nano.api.account_pending_block_info.source)
}
inline void account_pending_block_info::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nano.api.account_pending_block_info.source)
}
inline ::std::string* account_pending_block_info::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:nano.api.account_pending_block_info.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* account_pending_block_info::release_source() {
  // @@protoc_insertion_point(field_release:nano.api.account_pending_block_info.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void account_pending_block_info::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:nano.api.account_pending_block_info.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace nano

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_accounts_2eproto__INCLUDED
