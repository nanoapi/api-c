/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: util.proto */

#ifndef PROTOBUF_C_util_2eproto__INCLUDED
#define PROTOBUF_C_util_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ReqAddressValid ReqAddressValid;
typedef struct _ResAddressValid ResAddressValid;


/* --- enums --- */


/* --- messages --- */

/*
 ** Check if the supplied address is correct 
 */
struct  _ReqAddressValid
{
  ProtobufCMessage base;
  char *address;
};
#define REQ_ADDRESS_VALID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&req_address_valid__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 ** Address check result. If invalid, the message string contains the reason. 
 */
struct  _ResAddressValid
{
  ProtobufCMessage base;
  protobuf_c_boolean valid;
  char *reason;
};
#define RES_ADDRESS_VALID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&res_address_valid__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/* ReqAddressValid methods */
void   req_address_valid__init
                     (ReqAddressValid         *message);
size_t req_address_valid__get_packed_size
                     (const ReqAddressValid   *message);
size_t req_address_valid__pack
                     (const ReqAddressValid   *message,
                      uint8_t             *out);
size_t req_address_valid__pack_to_buffer
                     (const ReqAddressValid   *message,
                      ProtobufCBuffer     *buffer);
ReqAddressValid *
       req_address_valid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   req_address_valid__free_unpacked
                     (ReqAddressValid *message,
                      ProtobufCAllocator *allocator);
/* ResAddressValid methods */
void   res_address_valid__init
                     (ResAddressValid         *message);
size_t res_address_valid__get_packed_size
                     (const ResAddressValid   *message);
size_t res_address_valid__pack
                     (const ResAddressValid   *message,
                      uint8_t             *out);
size_t res_address_valid__pack_to_buffer
                     (const ResAddressValid   *message,
                      ProtobufCBuffer     *buffer);
ResAddressValid *
       res_address_valid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   res_address_valid__free_unpacked
                     (ResAddressValid *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ReqAddressValid_Closure)
                 (const ReqAddressValid *message,
                  void *closure_data);
typedef void (*ResAddressValid_Closure)
                 (const ResAddressValid *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor req_address_valid__descriptor;
extern const ProtobufCMessageDescriptor res_address_valid__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_util_2eproto__INCLUDED */
